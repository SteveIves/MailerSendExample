
import System.Text
import System.Text.Json

namespace SynPSG.EmailTools

    public class MailerSend

        ;;; <summary>
        ;;; Use MailerSend to send an email message to a single recipient
        ;;; </summary>
        ;;; <param name="SenderName">Sender name</param>
        ;;; <param name="SenderAddress">Sender email address</param>
        ;;; <param name="RecipientNames">Recipient name(s)</param>
        ;;; <param name="RecipientAddresses">Recipient email addresses</param>
        ;;; <param name="Subject">Message subject</param>
        ;;; <param name="BodyText">Message body</param>
        ;;; <param name="ErrorMessage"></param>
        ;;; <returns></returns>
        public static method SendMessage, boolean
            required in  SenderName, string
            required in  SenderAddress, string
            required in  RecipientName, string
            required in  RecipientAddress, string
            required in  Subject, string
            required in  BodyText, string
            required in  BodyIsHtml, boolean
            required out ErrorMessage, string
        proc
            begin
                data RecipientNames = new string[1]
                data RecipientAddresses = new string[1]
                RecipientNames[1] = RecipientName
                RecipientAddresses[1] = RecipientAddress
                mreturn SendMessage(SenderName,SenderAddress,RecipientNames,RecipientAddresses,Subject,BodyText,BodyIsHtml,ErrorMessage)
            end
        endmethod

        ;;; <summary>
        ;;; Use MailerSend to send an email message to multiple recipients
        ;;; </summary>
        ;;; <param name="SenderName">Sender name</param>
        ;;; <param name="SenderAddress">Sender email address</param>
        ;;; <param name="RecipientName">Recipient name(s)</param>
        ;;; <param name="RecipientAddress">Recipient email addresses</param>
        ;;; <param name="Subject">Message subject</param>
        ;;; <param name="BodyText">Message body</param>
        ;;; <param name="ErrorMessage"></param>
        ;;; <returns></returns>
        public static method SendMessage, boolean
            required in  SenderName, string
            required in  SenderAddress, string
            required in  RecipientName, [#]string
            required in  RecipientAddress, [#]string
            required in  Subject, string
            required in  BodyText, string
            required in  BodyIsHtml, boolean
            required out ErrorMessage, string

            stack record
                ok, boolean
                requestBody, string
                apiToken, string
            endrecord

        proc
            ok = true
            ErrorMessage = ""

            ;------------------------------------------------------------------
            ;Validate parameters

            begin
                data failed = false
                data sb = new @StringBuilder()
                sb.Append("Invalid parameters: ")

                ;Validate SenderName
                if (String.IsNullOrWhitespace(SenderName))
                begin
                    sb.Append("SenderName ")
                    failed = true
                end

                ;Validate SenderAddress
                ;TODO: Validate SenderAddress is actually an email address
                if (String.IsNullOrWhitespace(SenderAddress))
                begin
                    sb.Append("SenderAddress ")
                    failed = true
                end

                ;Validate RecipientName
                if (RecipientName.Length < 1) then
                begin
                    sb.Append("RecipientName ")
                    failed = true
                end
                else
                begin
                    data ix, int
                    data fail = false
                    for ix from 1 thru RecipientName.Length
                    begin
                        if (String.IsNullOrWhitespace(RecipientName[ix]))
                        begin
                            fail = true
                            exitloop
                        end
                    end
                    if (fail)
                    begin
                        sb.Append("RecipientName ")
                        failed = true
                    end
                end

                ;Validate RecipientAddress
                ;TODO: Validate each RecipientAddress is actually an email address
                if (RecipientAddress.Length < 1) then
                begin
                    sb.Append("RecipientAddress ")
                    failed = true
                end
                else
                begin
                    data ix, int
                    data fail = false
                    for ix from 1 thru RecipientAddress.Length
                    begin
                        if (String.IsNullOrWhitespace(RecipientAddress[ix]))
                        begin
                            fail = true
                            exitloop
                        end
                    end
                    if (fail)
                    begin
                        sb.Append("RecipientAddress ")
                        failed = true
                    end
                end

                ;Validate Subject
                if (String.IsNullOrWhitespace(Subject))
                begin
                    sb.Append("Subject ")
                    failed = true
                end


                ;Validate BodyText
                if (String.IsNullOrWhitespace(BodyText))
                begin
                    sb.Append("BodyText ")
                    failed = true
                end

                ;Any failures?
                if (failed)
                begin
                    ErrorMessage = sb.ToString()
                    ok = false
                end
            end

            ;------------------------------------------------------------------
            ;Get the API token from MailerSend.settings.json
            if (ok)
            begin
                data tmpch, i4
                data tmpbuf, a80
                try
                begin
                    open(tmpch=0,i:s,"MailerSendApiToken.txt")
                    reads(tmpch,tmpbuf)
                    if (tmpbuf) then
                        apiToken = %atrimtostring(tmpbuf)
                    else
                    begin
                        ErrorMessage = "Failed to read API token from MailerSendApiToken.txt"
                        ok = false
                    end
                end
                catch (e, @Exception)
                begin
                    ErrorMessage = "Failed to read API token from MailerSendApiToken.txt"
                    ok = false
                end
                finally
                begin
                    if (tmpch)
                        close tmpch
                end
                endtry
            end

            ;------------------------------------------------------------------
            ;Build the JSON message
            if (ok)
            begin
                data jsonBuffer = new StringBuilder()
                data jsonWriter = Utf8JsonWriter.CreateUtf8JsonWriter(jsonBuffer)
                data ix, int

                jsonWriter.WriteStartObject()

                jsonWriter.WriteStartObject("from")
                jsonWriter.WriteString("email",SenderAddress)
                jsonWriter.WriteString("name",SenderName)
                jsonWriter.WriteEndObject()

                jsonWriter.WriteStartArray("to")
                for ix from 1 thru RecipientName.Length
                begin
                    jsonWriter.WriteStartObject()
                    jsonWriter.WriteString("email",RecipientAddress[ix])
                    jsonWriter.WriteString("name",RecipientName[ix])
                    jsonWriter.WriteEndObject()
                end
                jsonWriter.WriteEndArray()

                jsonWriter.WriteString("subject",Subject)

                if (BodyIsHtml) then
                    jsonWriter.WriteString("html",BodyText)
                else
                    jsonWriter.WriteString("text",BodyText)

                jsonWriter.WriteEndObject()
                jsonWriter.Flush()
                jsonWriter.Reset()

                requestBody = jsonBuffer.ToString()
            end

            ;------------------------------------------------------------------
            ;Send the message to the MailerSend API
            if (ok)
            begin
                data status, int
                data responseBody, string
                data requestHeaders, [#]string
                data responseHeaders, [#]string

                requestHeaders = new string[3]
                requestHeaders[1] = "host: api.mailersend.com"
                requestHeaders[2] = "content-type: application/json"
                requestHeaders[3] = "authorization: Bearer " + apiToken

                status = %http_post("https://api.mailersend.com/v1/email",,requestBody,responseBody,ErrorMessage,requestHeaders,responseHeaders,"mailersend.log")

                using status select
                (0,200,201,202,204),
                    nop
                (400,401,403,404,405,408,421,422,429,500,502,503,504),
                begin
                    data jdoc = JsonDocument.Parse(responseBody)
                    data rootElement = jdoc.RootElement
                    data messageElement = rootElement.GetProperty("message")
                    ErrorMessage = messageElement.GetString()
                    ok = false
                end
                endusing
            end

            mreturn ok

        endmethod

    endclass

endnamespace